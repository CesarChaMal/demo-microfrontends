name: Deploy to GitHub Pages (Manual)

on:
  workflow_dispatch:

env:
  GITHUB_USERNAME: ${{ github.repository_owner }}
  ORG_NAME: ${{ secrets.ORG_NAME || github.repository_owner }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: "--openssl-legacy-provider"
    strategy:
      matrix:
        app:
          - { name: "single-spa-auth-app", bundle: "single-spa-auth-app.umd.js" }
          - { name: "single-spa-layout-app", bundle: "single-spa-layout-app.umd.js" }
          - { name: "single-spa-home-app", bundle: "single-spa-home-app.js" }
          - { name: "single-spa-angular-app", bundle: "single-spa-angular-app.js" }
          - { name: "single-spa-vue-app", bundle: "single-spa-vue-app.umd.js" }
          - { name: "single-spa-react-app", bundle: "single-spa-react-app.js" }
          - { name: "single-spa-vanilla-app", bundle: "single-spa-vanilla-app.js" }
          - { name: "single-spa-webcomponents-app", bundle: "single-spa-webcomponents-app.js" }
          - { name: "single-spa-typescript-app", bundle: "single-spa-typescript-app.js" }
          - { name: "single-spa-jquery-app", bundle: "single-spa-jquery-app.js" }
          - { name: "single-spa-svelte-app", bundle: "single-spa-svelte-app.js" }
          - { name: "single-spa-root", bundle: "root-application.js" }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.20.8'
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app.name }}/package-lock.json

      - name: Switch to local mode
        run: |
          echo "üîç Before switch - .npmrc content:"
          cat .npmrc || echo "No .npmrc file found"
          node scripts/switch-mode.js local
          echo "üîç After switch - .npmrc content:"
          cat .npmrc || echo "No .npmrc file found"

      - name: Configure NPM registry
        run: |
          echo "üîç Current .npmrc content:"
          cat .npmrc || echo "No .npmrc file found"
          npm config delete registry || true
          npm config set registry https://registry.npmjs.org/
          npm config list
          echo "Registry: $(npm config get registry)"
          
      - name: Install shared dependencies
        run: |
          cd shared
          rm -f package-lock.json
          npm config delete registry || true
          npm config set registry https://registry.npmjs.org/
          npm install --legacy-peer-deps
          
      - name: Install dependencies
        run: |
          cd ${{ matrix.app.name }}
          rm -f package-lock.json
          npm install --legacy-peer-deps
        env:
          NODE_OPTIONS: "--openssl-legacy-provider"

      - name: Build application
        run: |
          cd ${{ matrix.app.name }}
          export NODE_OPTIONS="--openssl-legacy-provider"
          npm run build:prod
        env:
          NODE_OPTIONS: "--openssl-legacy-provider"

      - name: Create GitHub Repository
        env:
          GITHUB_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
          APP_NAME: ${{ matrix.app.name }}
        run: |
          # Debug: Check if token is available
          echo "üîç Debug: GITHUB_API_TOKEN length: ${#GITHUB_API_TOKEN}"
          if [ -z "$GITHUB_API_TOKEN" ]; then
            echo "‚ùå GH_API_TOKEN secret is empty or not set"
            echo "üìù Please check: https://github.com/${{ github.repository_owner }}/demo-microfrontends/settings/secrets/actions"
            exit 1
          fi
          
          # Check if repository exists
          REPO_CHECK=$(curl -s -H "Authorization: token ${GITHUB_API_TOKEN}" "https://api.github.com/repos/${{ github.repository_owner }}/${APP_NAME}")
          
          if echo "$REPO_CHECK" | grep -q '"message".*"Not Found"'; then
            echo "üîß Creating GitHub repository: ${APP_NAME}"
            REPO_RESPONSE=$(curl -s -X POST \
              -H "Authorization: token ${GITHUB_API_TOKEN}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/user/repos" \
              -d "{\"name\":\"${APP_NAME}\",\"description\":\"${APP_NAME} microfrontend\",\"private\":false}")
            
            if echo "$REPO_RESPONSE" | grep -q '"id"'; then
              echo "‚úÖ Repository ${APP_NAME} created successfully"
              sleep 3
            else
              echo "‚ùå Error creating repository: $REPO_RESPONSE"
              exit 1
            fi
          else
            echo "‚úÖ Repository ${APP_NAME} already exists"
          fi

      - name: Deploy to GitHub Pages
        env:
          GITHUB_API_TOKEN: ${{ secrets.GH_API_TOKEN }}
          APP_NAME: ${{ matrix.app.name }}
          BUNDLE_FILE: ${{ matrix.app.bundle }}
        run: |
          cd ${{ matrix.app.name }}
          
          # Configure git
          git config --global user.name "Cesar Francisco Chavez Maldonado - GitHub Actions"
          git config --global user.email "cesarchamal@gmail.com"
          
          # Initialize repo if needed
          if [ ! -d ".git" ]; then
            git init
            git branch -M main
          fi
          
          # Set up remote with token
          git remote remove origin 2>/dev/null || true
          git remote add origin "https://x-access-token:${GITHUB_API_TOKEN}@github.com/${{ github.repository_owner }}/${APP_NAME}.git"
          
          # Copy dist to root for GitHub Pages
          cp -r dist/* .
          
          # Copy shared files if they exist
          if [ -f "../shared/employees.json" ]; then
            cp ../shared/employees.json .
          fi
          
          git add .
          git commit -m "Deploy to GitHub Pages" || echo "No changes"
          
          # Push to main branch
          git push -u origin main --force
          
          # Enable GitHub Pages
          echo "üåê Enabling GitHub Pages for ${APP_NAME}..."
          curl -X POST \
            -H "Authorization: token ${GITHUB_API_TOKEN}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository_owner }}/${APP_NAME}/pages" \
            -d '{"source":{"branch":"main","path":"/"}}' \
            2>/dev/null || echo "GitHub Pages may already be enabled"

      - name: Update import map
        env:
          APP_NAME: ${{ matrix.app.name }}
          BUNDLE_FILE: ${{ matrix.app.bundle }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
          ORG_NAME: ${{ env.ORG_NAME }}
        run: |
          # Wait for GitHub Pages to be ready
          sleep 10
          
          # Update import map with retry logic
          for i in {1..3}; do
            echo "üîÑ Attempt $i: Updating import map for ${APP_NAME}"
            if node scripts/update-importmap-github.mjs; then
              echo "‚úÖ Import map updated successfully"
              break
            else
              echo "‚ö†Ô∏è Attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done